// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lzw_encode_hw_lzw_encode_hw,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.670000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.869100,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=0,HLS_SYN_FF=2429,HLS_SYN_LUT=4907,HLS_VERSION=2020_2}" *)

module lzw_encode_hw (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 293'd1;
parameter    ap_ST_fsm_state2 = 293'd2;
parameter    ap_ST_fsm_state3 = 293'd4;
parameter    ap_ST_fsm_state4 = 293'd8;
parameter    ap_ST_fsm_state5 = 293'd16;
parameter    ap_ST_fsm_state6 = 293'd32;
parameter    ap_ST_fsm_state7 = 293'd64;
parameter    ap_ST_fsm_state8 = 293'd128;
parameter    ap_ST_fsm_state9 = 293'd256;
parameter    ap_ST_fsm_state10 = 293'd512;
parameter    ap_ST_fsm_state11 = 293'd1024;
parameter    ap_ST_fsm_state12 = 293'd2048;
parameter    ap_ST_fsm_state13 = 293'd4096;
parameter    ap_ST_fsm_state14 = 293'd8192;
parameter    ap_ST_fsm_state15 = 293'd16384;
parameter    ap_ST_fsm_state16 = 293'd32768;
parameter    ap_ST_fsm_state17 = 293'd65536;
parameter    ap_ST_fsm_state18 = 293'd131072;
parameter    ap_ST_fsm_state19 = 293'd262144;
parameter    ap_ST_fsm_state20 = 293'd524288;
parameter    ap_ST_fsm_state21 = 293'd1048576;
parameter    ap_ST_fsm_state22 = 293'd2097152;
parameter    ap_ST_fsm_state23 = 293'd4194304;
parameter    ap_ST_fsm_state24 = 293'd8388608;
parameter    ap_ST_fsm_state25 = 293'd16777216;
parameter    ap_ST_fsm_state26 = 293'd33554432;
parameter    ap_ST_fsm_state27 = 293'd67108864;
parameter    ap_ST_fsm_state28 = 293'd134217728;
parameter    ap_ST_fsm_state29 = 293'd268435456;
parameter    ap_ST_fsm_state30 = 293'd536870912;
parameter    ap_ST_fsm_state31 = 293'd1073741824;
parameter    ap_ST_fsm_state32 = 293'd2147483648;
parameter    ap_ST_fsm_state33 = 293'd4294967296;
parameter    ap_ST_fsm_state34 = 293'd8589934592;
parameter    ap_ST_fsm_state35 = 293'd17179869184;
parameter    ap_ST_fsm_state36 = 293'd34359738368;
parameter    ap_ST_fsm_state37 = 293'd68719476736;
parameter    ap_ST_fsm_state38 = 293'd137438953472;
parameter    ap_ST_fsm_state39 = 293'd274877906944;
parameter    ap_ST_fsm_state40 = 293'd549755813888;
parameter    ap_ST_fsm_state41 = 293'd1099511627776;
parameter    ap_ST_fsm_state42 = 293'd2199023255552;
parameter    ap_ST_fsm_state43 = 293'd4398046511104;
parameter    ap_ST_fsm_state44 = 293'd8796093022208;
parameter    ap_ST_fsm_state45 = 293'd17592186044416;
parameter    ap_ST_fsm_state46 = 293'd35184372088832;
parameter    ap_ST_fsm_state47 = 293'd70368744177664;
parameter    ap_ST_fsm_state48 = 293'd140737488355328;
parameter    ap_ST_fsm_state49 = 293'd281474976710656;
parameter    ap_ST_fsm_state50 = 293'd562949953421312;
parameter    ap_ST_fsm_state51 = 293'd1125899906842624;
parameter    ap_ST_fsm_state52 = 293'd2251799813685248;
parameter    ap_ST_fsm_state53 = 293'd4503599627370496;
parameter    ap_ST_fsm_state54 = 293'd9007199254740992;
parameter    ap_ST_fsm_state55 = 293'd18014398509481984;
parameter    ap_ST_fsm_state56 = 293'd36028797018963968;
parameter    ap_ST_fsm_state57 = 293'd72057594037927936;
parameter    ap_ST_fsm_state58 = 293'd144115188075855872;
parameter    ap_ST_fsm_state59 = 293'd288230376151711744;
parameter    ap_ST_fsm_state60 = 293'd576460752303423488;
parameter    ap_ST_fsm_state61 = 293'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 293'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 293'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 293'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 293'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 293'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 293'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 293'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 293'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 293'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 293'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 293'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 293'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 293'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 293'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 293'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 293'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 293'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 293'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 293'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 293'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 293'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 293'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 293'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 293'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 293'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 293'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 293'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 293'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 293'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 293'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 293'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 293'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 293'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 293'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 293'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 293'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 293'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 293'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 293'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 293'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 293'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 293'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 293'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 293'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 293'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 293'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 293'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 293'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 293'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 293'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 293'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 293'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 293'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 293'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 293'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 293'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 293'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 293'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 293'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 293'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 293'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 293'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 293'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 293'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 293'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 293'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 293'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 293'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 293'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 293'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 293'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 293'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 293'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 293'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 293'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 293'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 293'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 293'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 293'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 293'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 293'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 293'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 293'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 293'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 293'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 293'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 293'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 293'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 293'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 293'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 293'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 293'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 293'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 293'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 293'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 293'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 293'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 293'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 293'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 293'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 293'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 293'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 293'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 293'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 293'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 293'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 293'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 293'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 293'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 293'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 293'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 293'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 293'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 293'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 293'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 293'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 293'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 293'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 293'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 293'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 293'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 293'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 293'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 293'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 293'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 293'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 293'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 293'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 293'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 293'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 293'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state193 = 293'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state194 = 293'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state195 = 293'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state196 = 293'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state197 = 293'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state198 = 293'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state199 = 293'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state200 = 293'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state201 = 293'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state202 = 293'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state203 = 293'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state204 = 293'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state205 = 293'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state206 = 293'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state207 = 293'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state208 = 293'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state209 = 293'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state210 = 293'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state211 = 293'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state212 = 293'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state213 = 293'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state214 = 293'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state215 = 293'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state216 = 293'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state217 = 293'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state218 = 293'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state219 = 293'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state220 = 293'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state221 = 293'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state222 = 293'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state223 = 293'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state224 = 293'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state225 = 293'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state226 = 293'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state227 = 293'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state228 = 293'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state229 = 293'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state230 = 293'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state231 = 293'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state232 = 293'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state233 = 293'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state234 = 293'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state235 = 293'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state236 = 293'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state237 = 293'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state238 = 293'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state239 = 293'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state240 = 293'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state241 = 293'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state242 = 293'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state243 = 293'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state244 = 293'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state245 = 293'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state246 = 293'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state247 = 293'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state248 = 293'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state249 = 293'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state250 = 293'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state251 = 293'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state252 = 293'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state253 = 293'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state254 = 293'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state255 = 293'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state256 = 293'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state257 = 293'd115792089237316195423570985008687907853269984665640564039457584007913129639936;
parameter    ap_ST_fsm_state258 = 293'd231584178474632390847141970017375815706539969331281128078915168015826259279872;
parameter    ap_ST_fsm_state259 = 293'd463168356949264781694283940034751631413079938662562256157830336031652518559744;
parameter    ap_ST_fsm_state260 = 293'd926336713898529563388567880069503262826159877325124512315660672063305037119488;
parameter    ap_ST_fsm_state261 = 293'd1852673427797059126777135760139006525652319754650249024631321344126610074238976;
parameter    ap_ST_fsm_state262 = 293'd3705346855594118253554271520278013051304639509300498049262642688253220148477952;
parameter    ap_ST_fsm_state263 = 293'd7410693711188236507108543040556026102609279018600996098525285376506440296955904;
parameter    ap_ST_fsm_state264 = 293'd14821387422376473014217086081112052205218558037201992197050570753012880593911808;
parameter    ap_ST_fsm_state265 = 293'd29642774844752946028434172162224104410437116074403984394101141506025761187823616;
parameter    ap_ST_fsm_state266 = 293'd59285549689505892056868344324448208820874232148807968788202283012051522375647232;
parameter    ap_ST_fsm_state267 = 293'd118571099379011784113736688648896417641748464297615937576404566024103044751294464;
parameter    ap_ST_fsm_state268 = 293'd237142198758023568227473377297792835283496928595231875152809132048206089502588928;
parameter    ap_ST_fsm_state269 = 293'd474284397516047136454946754595585670566993857190463750305618264096412179005177856;
parameter    ap_ST_fsm_state270 = 293'd948568795032094272909893509191171341133987714380927500611236528192824358010355712;
parameter    ap_ST_fsm_state271 = 293'd1897137590064188545819787018382342682267975428761855001222473056385648716020711424;
parameter    ap_ST_fsm_state272 = 293'd3794275180128377091639574036764685364535950857523710002444946112771297432041422848;
parameter    ap_ST_fsm_state273 = 293'd7588550360256754183279148073529370729071901715047420004889892225542594864082845696;
parameter    ap_ST_fsm_state274 = 293'd15177100720513508366558296147058741458143803430094840009779784451085189728165691392;
parameter    ap_ST_fsm_state275 = 293'd30354201441027016733116592294117482916287606860189680019559568902170379456331382784;
parameter    ap_ST_fsm_state276 = 293'd60708402882054033466233184588234965832575213720379360039119137804340758912662765568;
parameter    ap_ST_fsm_state277 = 293'd121416805764108066932466369176469931665150427440758720078238275608681517825325531136;
parameter    ap_ST_fsm_state278 = 293'd242833611528216133864932738352939863330300854881517440156476551217363035650651062272;
parameter    ap_ST_fsm_state279 = 293'd485667223056432267729865476705879726660601709763034880312953102434726071301302124544;
parameter    ap_ST_fsm_state280 = 293'd971334446112864535459730953411759453321203419526069760625906204869452142602604249088;
parameter    ap_ST_fsm_state281 = 293'd1942668892225729070919461906823518906642406839052139521251812409738904285205208498176;
parameter    ap_ST_fsm_state282 = 293'd3885337784451458141838923813647037813284813678104279042503624819477808570410416996352;
parameter    ap_ST_fsm_state283 = 293'd7770675568902916283677847627294075626569627356208558085007249638955617140820833992704;
parameter    ap_ST_fsm_state284 = 293'd15541351137805832567355695254588151253139254712417116170014499277911234281641667985408;
parameter    ap_ST_fsm_state285 = 293'd31082702275611665134711390509176302506278509424834232340028998555822468563283335970816;
parameter    ap_ST_fsm_state286 = 293'd62165404551223330269422781018352605012557018849668464680057997111644937126566671941632;
parameter    ap_ST_fsm_state287 = 293'd124330809102446660538845562036705210025114037699336929360115994223289874253133343883264;
parameter    ap_ST_fsm_state288 = 293'd248661618204893321077691124073410420050228075398673858720231988446579748506266687766528;
parameter    ap_ST_fsm_state289 = 293'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533056;
parameter    ap_ST_fsm_state290 = 293'd994646472819573284310764496293641680200912301594695434880927953786318994025066751066112;
parameter    ap_ST_fsm_state291 = 293'd1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224;
parameter    ap_ST_fsm_state292 = 293'd3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448;
parameter    ap_ST_fsm_state293 = 293'd7957171782556586274486115970349133441607298412757563479047423630290551952200534008528896;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [292:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] input_data;
wire   [63:0] input_size;
wire   [63:0] compressed_data;
reg   [63:0] compressed_size;
reg   [10:0] hw_dictionary_0_address0;
reg    hw_dictionary_0_ce0;
reg    hw_dictionary_0_we0;
reg   [15:0] hw_dictionary_0_d0;
wire   [15:0] hw_dictionary_0_q0;
reg   [10:0] hw_dictionary_1_address0;
reg    hw_dictionary_1_ce0;
reg    hw_dictionary_1_we0;
reg   [15:0] hw_dictionary_1_d0;
wire   [15:0] hw_dictionary_1_q0;
reg   [10:0] hw_dictionary_2_address0;
reg    hw_dictionary_2_ce0;
reg    hw_dictionary_2_we0;
reg   [15:0] hw_dictionary_2_d0;
wire   [15:0] hw_dictionary_2_q0;
reg   [10:0] hw_dictionary_3_address0;
reg    hw_dictionary_3_ce0;
reg    hw_dictionary_3_we0;
reg   [15:0] hw_dictionary_3_d0;
wire   [15:0] hw_dictionary_3_q0;
reg   [10:0] hw_dictionary_4_address0;
reg    hw_dictionary_4_ce0;
reg    hw_dictionary_4_we0;
reg   [15:0] hw_dictionary_4_d0;
wire   [15:0] hw_dictionary_4_q0;
reg   [10:0] hw_dictionary_5_address0;
reg    hw_dictionary_5_ce0;
reg    hw_dictionary_5_we0;
reg   [15:0] hw_dictionary_5_d0;
wire   [15:0] hw_dictionary_5_q0;
reg   [10:0] hw_dictionary_6_address0;
reg    hw_dictionary_6_ce0;
reg    hw_dictionary_6_we0;
reg   [15:0] hw_dictionary_6_d0;
wire   [15:0] hw_dictionary_6_q0;
reg   [10:0] hw_dictionary_7_address0;
reg    hw_dictionary_7_ce0;
reg    hw_dictionary_7_we0;
reg   [15:0] hw_dictionary_7_d0;
wire   [15:0] hw_dictionary_7_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln112_reg_1270;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state145;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state153;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state155;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state223;
reg   [0:0] icmp_ln170_reg_1584;
wire    ap_CS_fsm_state224;
wire    ap_CS_fsm_state225;
wire    ap_CS_fsm_state293;
reg   [0:0] icmp_ln164_reg_1350;
reg   [0:0] icmp_ln178_reg_1560;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [7:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [63:0] reg_786;
wire    ap_CS_fsm_state151;
wire   [0:0] icmp_ln164_1_fu_1084_p2;
wire   [0:0] icmp_ln178_fu_1093_p2;
wire    ap_CS_fsm_state152;
wire   [0:0] icmp_ln170_fu_1158_p2;
wire   [0:0] icmp_ln112_fu_794_p2;
reg   [7:0] current_code_reg_1285;
wire   [15:0] zext_ln122_fu_806_p1;
reg   [15:0] zext_ln122_reg_1291;
wire    ap_CS_fsm_state73;
wire   [12:0] zext_ln122_1_fu_809_p1;
wire   [0:0] icmp_ln127_fu_821_p2;
reg   [0:0] icmp_ln127_reg_1301;
reg   [63:0] gmem_addr_1_reg_1320;
wire   [31:0] add_ln127_1_fu_841_p2;
reg   [31:0] add_ln127_1_reg_1326;
reg   [63:0] code_word_count_1_reg_1331;
wire    ap_CS_fsm_state144;
wire   [12:0] trunc_ln127_1_fu_861_p1;
reg   [12:0] trunc_ln127_1_reg_1337;
wire   [63:0] code_word_count_2_fu_871_p2;
reg   [63:0] code_word_count_2_reg_1345;
wire   [0:0] icmp_ln127_1_fu_866_p2;
wire   [0:0] icmp_ln164_fu_877_p2;
wire   [15:0] zext_ln133_fu_893_p1;
reg   [15:0] zext_ln133_reg_1369;
wire   [0:0] icmp_ln133_fu_897_p2;
reg   [0:0] icmp_ln133_reg_1384;
wire   [0:0] icmp_ln133_1_fu_903_p2;
reg   [0:0] icmp_ln133_1_reg_1388;
wire    ap_CS_fsm_state146;
wire   [10:0] tmp_2_fu_913_p3;
reg   [10:0] tmp_2_reg_1392;
wire   [0:0] icmp_ln146_fu_943_p2;
reg   [0:0] icmp_ln146_reg_1437;
wire   [2:0] trunc_ln147_1_fu_952_p4;
reg   [2:0] trunc_ln147_1_reg_1441;
reg   [10:0] hw_dictionary_0_addr_1_reg_1445;
reg   [10:0] hw_dictionary_1_addr_1_reg_1450;
reg   [10:0] hw_dictionary_2_addr_1_reg_1455;
reg   [10:0] hw_dictionary_3_addr_1_reg_1460;
reg   [10:0] hw_dictionary_4_addr_1_reg_1465;
reg   [10:0] hw_dictionary_5_addr_1_reg_1470;
reg   [10:0] hw_dictionary_6_addr_1_reg_1475;
reg   [10:0] hw_dictionary_7_addr_1_reg_1480;
wire   [15:0] zext_ln134_fu_1018_p1;
reg   [15:0] zext_ln134_reg_1485;
wire    ap_CS_fsm_state147;
wire   [0:0] icmp_ln134_fu_1044_p2;
reg   [0:0] icmp_ln134_reg_1530;
wire   [15:0] j_1_fu_1055_p2;
wire    ap_CS_fsm_state148;
wire   [0:0] icmp_ln134_1_fu_1050_p2;
wire   [63:0] i_2_fu_1072_p2;
reg   [63:0] i_2_reg_1542;
wire   [63:0] i_3_fu_1078_p2;
reg   [63:0] i_3_reg_1547;
wire   [7:0] byte_fu_1111_p1;
reg   [7:0] byte_reg_1564;
wire   [31:0] bit_buffer_1_fu_1122_p3;
reg   [31:0] bit_buffer_1_reg_1569;
wire   [18:0] bit_buffer_1_cast_fu_1134_p3;
reg   [18:0] bit_buffer_1_cast_reg_1574;
wire   [31:0] bit_count_1_fu_1142_p2;
reg   [31:0] bit_count_1_reg_1579;
wire   [2:0] trunc_ln170_fu_1169_p1;
reg   [2:0] trunc_ln170_reg_1588;
wire   [29:0] add_ln170_2_fu_1193_p2;
reg   [29:0] add_ln170_2_reg_1593;
wire   [2:0] add_ln170_3_fu_1199_p2;
reg   [2:0] add_ln170_3_reg_1600;
wire   [29:0] add_ln170_5_fu_1208_p2;
reg   [29:0] add_ln170_5_reg_1605;
wire    ap_CS_fsm_state154;
wire   [31:0] bit_count_3_fu_1219_p2;
reg   [31:0] bit_count_3_reg_1613;
wire   [0:0] icmp_ln170_1_fu_1214_p2;
wire   [7:0] byte_1_fu_1230_p1;
reg   [7:0] byte_1_reg_1618;
reg   [12:0] code_words_address0;
reg    code_words_ce0;
reg    code_words_we0;
reg   [12:0] code_words_d0;
wire   [12:0] code_words_q0;
reg   [15:0] current_code_1_reg_613;
wire    ap_CS_fsm_state143;
wire    ap_CS_fsm_state150;
reg   [63:0] i_reg_631;
reg   [63:0] ap_phi_mux_code_word_count_0_lcssa_phi_fu_647_p4;
reg   [63:0] code_word_count_0_lcssa_reg_643;
reg   [12:0] ap_phi_mux_current_code_0_lcssa_phi_fu_658_p4;
reg   [12:0] current_code_0_lcssa_reg_655;
reg   [15:0] j_reg_665;
reg   [15:0] current_code_2_reg_677;
reg   [63:0] i_1_reg_691;
reg    ap_block_state223;
reg   [18:0] bit_buffer_reg_703;
reg   [29:0] indvar_reg_715;
reg   [31:0] bit_count_2_reg_726;
wire   [63:0] zext_ln134_1_fu_921_p1;
wire   [63:0] zext_ln147_fu_974_p1;
wire   [63:0] tmp_8_fu_992_p3;
wire   [63:0] tmp_4_fu_1028_p3;
wire   [63:0] grp_fu_775_p2;
wire   [63:0] add_ln127_fu_830_p2;
reg    ap_block_state2_io;
wire   [31:0] zext_ln170_1_fu_1204_p1;
reg    ap_predicate_op838_writeresp_state293;
reg    ap_block_state293;
reg   [63:0] code_word_count_fu_196;
wire   [63:0] grp_fu_738_p2;
reg   [15:0] dict_size_fu_200;
wire   [15:0] dict_size_1_fu_1061_p2;
reg   [31:0] bit_count_fu_204;
wire   [31:0] zext_ln170_2_fu_1234_p1;
reg   [63:0] compressed_size_promoted_fu_208;
wire   [63:0] add_ln170_4_fu_1240_p2;
reg    ap_block_state1;
wire   [63:0] add_ln180_fu_1115_p2;
wire    ap_CS_fsm_state149;
reg   [63:0] grp_fu_738_p0;
reg   [15:0] grp_fu_748_p9;
wire   [62:0] tmp_fu_812_p4;
wire   [31:0] trunc_ln127_fu_827_p1;
wire   [9:0] trunc_ln134_fu_909_p1;
wire   [2:0] tmp_5_fu_933_p4;
wire   [9:0] trunc_ln147_fu_962_p1;
wire   [10:0] tmp_7_fu_966_p3;
wire   [10:0] or_ln148_fu_986_p2;
wire   [5:0] lshr_ln_fu_1008_p4;
wire   [10:0] or_ln134_fu_1023_p2;
wire   [15:0] grp_fu_748_p10;
wire   [31:0] zext_ln164_fu_1089_p1;
wire   [31:0] sub_ln179_fu_1099_p2;
wire   [31:0] shl_ln179_fu_1105_p2;
wire   [5:0] trunc_ln167_fu_1130_p1;
wire   [28:0] tmp_6_fu_1148_p4;
wire   [31:0] add_ln170_fu_1173_p2;
wire   [28:0] trunc_ln170_1_fu_1179_p4;
wire   [29:0] zext_ln170_fu_1189_p1;
wire   [31:0] lshr_ln171_fu_1225_p2;
wire   [63:0] zext_ln170_3_fu_1237_p1;
reg   [292:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 293'd1;
end

lzw_encode_hw_hw_dictionary_0 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
hw_dictionary_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hw_dictionary_0_address0),
    .ce0(hw_dictionary_0_ce0),
    .we0(hw_dictionary_0_we0),
    .d0(hw_dictionary_0_d0),
    .q0(hw_dictionary_0_q0)
);

lzw_encode_hw_hw_dictionary_0 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
hw_dictionary_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hw_dictionary_1_address0),
    .ce0(hw_dictionary_1_ce0),
    .we0(hw_dictionary_1_we0),
    .d0(hw_dictionary_1_d0),
    .q0(hw_dictionary_1_q0)
);

lzw_encode_hw_hw_dictionary_0 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
hw_dictionary_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hw_dictionary_2_address0),
    .ce0(hw_dictionary_2_ce0),
    .we0(hw_dictionary_2_we0),
    .d0(hw_dictionary_2_d0),
    .q0(hw_dictionary_2_q0)
);

lzw_encode_hw_hw_dictionary_0 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
hw_dictionary_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hw_dictionary_3_address0),
    .ce0(hw_dictionary_3_ce0),
    .we0(hw_dictionary_3_we0),
    .d0(hw_dictionary_3_d0),
    .q0(hw_dictionary_3_q0)
);

lzw_encode_hw_hw_dictionary_0 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
hw_dictionary_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hw_dictionary_4_address0),
    .ce0(hw_dictionary_4_ce0),
    .we0(hw_dictionary_4_we0),
    .d0(hw_dictionary_4_d0),
    .q0(hw_dictionary_4_q0)
);

lzw_encode_hw_hw_dictionary_0 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
hw_dictionary_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hw_dictionary_5_address0),
    .ce0(hw_dictionary_5_ce0),
    .we0(hw_dictionary_5_we0),
    .d0(hw_dictionary_5_d0),
    .q0(hw_dictionary_5_q0)
);

lzw_encode_hw_hw_dictionary_0 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
hw_dictionary_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hw_dictionary_6_address0),
    .ce0(hw_dictionary_6_ce0),
    .we0(hw_dictionary_6_we0),
    .d0(hw_dictionary_6_d0),
    .q0(hw_dictionary_6_q0)
);

lzw_encode_hw_hw_dictionary_0 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
hw_dictionary_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hw_dictionary_7_address0),
    .ce0(hw_dictionary_7_ce0),
    .we0(hw_dictionary_7_we0),
    .d0(hw_dictionary_7_d0),
    .q0(hw_dictionary_7_q0)
);

lzw_encode_hw_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_data(input_data),
    .input_size(input_size),
    .compressed_data(compressed_data),
    .compressed_size(compressed_size),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

lzw_encode_hw_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(reg_786),
    .I_AWID(1'd0),
    .I_AWLEN(gmem_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

lzw_encode_hw_code_words #(
    .DataWidth( 13 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
code_words_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(code_words_address0),
    .ce0(code_words_ce0),
    .we0(code_words_we0),
    .d0(code_words_d0),
    .q0(code_words_q0)
);

lzw_encode_hw_mux_816_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mux_816_16_1_1_U1(
    .din0(hw_dictionary_0_q0),
    .din1(hw_dictionary_1_q0),
    .din2(hw_dictionary_2_q0),
    .din3(hw_dictionary_3_q0),
    .din4(hw_dictionary_4_q0),
    .din5(hw_dictionary_5_q0),
    .din6(hw_dictionary_6_q0),
    .din7(hw_dictionary_7_q0),
    .din8(grp_fu_748_p9),
    .dout(grp_fu_748_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_predicate_op838_writeresp_state293 == 1'b1) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state293))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state144) & (((icmp_ln164_fu_877_p2 == 1'd0) & (icmp_ln127_reg_1301 == 1'd1)) | ((icmp_ln164_fu_877_p2 == 1'd0) & (icmp_ln127_1_fu_866_p2 == 1'd1))))) begin
        bit_buffer_reg_703 <= 19'd0;
    end else if ((~((gmem_BVALID == 1'b0) & (icmp_ln170_reg_1584 == 1'd1)) & (1'b1 == ap_CS_fsm_state223))) begin
        bit_buffer_reg_703 <= bit_buffer_1_cast_reg_1574;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state155))) begin
        bit_count_2_reg_726 <= bit_count_3_reg_1613;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state153))) begin
        bit_count_2_reg_726 <= bit_count_1_reg_1579;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state144) & (((icmp_ln164_fu_877_p2 == 1'd0) & (icmp_ln127_reg_1301 == 1'd1)) | ((icmp_ln164_fu_877_p2 == 1'd0) & (icmp_ln127_1_fu_866_p2 == 1'd1))))) begin
        bit_count_fu_204 <= 32'd0;
    end else if (((icmp_ln170_fu_1158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state152))) begin
        bit_count_fu_204 <= bit_count_1_fu_1142_p2;
    end else if (((icmp_ln170_1_fu_1214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state154))) begin
        bit_count_fu_204 <= zext_ln170_2_fu_1234_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_1_fu_866_p2 == 1'd1) & (icmp_ln127_reg_1301 == 1'd0) & (1'b1 == ap_CS_fsm_state144))) begin
        code_word_count_0_lcssa_reg_643 <= code_word_count_fu_196;
    end else if (((icmp_ln127_fu_821_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        code_word_count_0_lcssa_reg_643 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_821_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
        code_word_count_fu_196 <= 64'd0;
    end else if ((((icmp_ln133_fu_897_p2 == 1'd0) & (gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state145)) | ((icmp_ln133_1_fu_903_p2 == 1'd0) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)))) begin
        code_word_count_fu_196 <= grp_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state144) & (((icmp_ln164_fu_877_p2 == 1'd0) & (icmp_ln127_reg_1301 == 1'd1)) | ((icmp_ln164_fu_877_p2 == 1'd0) & (icmp_ln127_1_fu_866_p2 == 1'd1))))) begin
        compressed_size_promoted_fu_208 <= 64'd0;
    end else if (((icmp_ln170_1_fu_1214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state154))) begin
        compressed_size_promoted_fu_208 <= add_ln170_4_fu_1240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_1_fu_866_p2 == 1'd1) & (icmp_ln127_reg_1301 == 1'd0) & (1'b1 == ap_CS_fsm_state144))) begin
        current_code_0_lcssa_reg_655 <= trunc_ln127_1_fu_861_p1;
    end else if (((icmp_ln127_fu_821_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        current_code_0_lcssa_reg_655 <= zext_ln122_1_fu_809_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        current_code_1_reg_613 <= current_code_2_reg_677;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        current_code_1_reg_613 <= zext_ln122_reg_1291;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln134_1_fu_1050_p2 == 1'd1) & (icmp_ln134_reg_1530 == 1'd1) & (icmp_ln133_1_reg_1388 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state148))) begin
        current_code_2_reg_677 <= j_reg_665;
    end else if ((((icmp_ln146_fu_943_p2 == 1'd0) & (icmp_ln133_1_fu_903_p2 == 1'd0) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)) | ((1'b1 == ap_CS_fsm_state148) & ((icmp_ln133_reg_1384 == 1'd0) | ((icmp_ln146_reg_1437 == 1'd1) & (icmp_ln133_1_reg_1388 == 1'd0)))))) begin
        current_code_2_reg_677 <= zext_ln133_reg_1369;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_821_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
        dict_size_fu_200 <= 16'd256;
    end else if (((1'b1 == ap_CS_fsm_state148) & ((icmp_ln133_reg_1384 == 1'd0) | ((icmp_ln146_reg_1437 == 1'd1) & (icmp_ln133_1_reg_1388 == 1'd0))))) begin
        dict_size_fu_200 <= dict_size_1_fu_1061_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state144) & (((icmp_ln164_fu_877_p2 == 1'd0) & (icmp_ln127_reg_1301 == 1'd1)) | ((icmp_ln164_fu_877_p2 == 1'd0) & (icmp_ln127_1_fu_866_p2 == 1'd1))))) begin
        i_1_reg_691 <= 64'd0;
    end else if ((~((gmem_BVALID == 1'b0) & (icmp_ln170_reg_1584 == 1'd1)) & (1'b1 == ap_CS_fsm_state223))) begin
        i_1_reg_691 <= i_3_reg_1547;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        i_reg_631 <= i_2_reg_1542;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        i_reg_631 <= 64'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state155))) begin
        indvar_reg_715 <= add_ln170_5_reg_1605;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state153))) begin
        indvar_reg_715 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_fu_897_p2 == 1'd1) & (gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state145))) begin
        j_reg_665 <= 16'd256;
    end else if (((1'b1 == ap_CS_fsm_state148) & (((icmp_ln134_reg_1530 == 1'd0) & (icmp_ln133_1_reg_1388 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1)) | ((icmp_ln134_1_fu_1050_p2 == 1'd0) & (icmp_ln133_1_reg_1388 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1))))) begin
        j_reg_665 <= j_1_fu_1055_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_821_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
        add_ln127_1_reg_1326 <= add_ln127_1_fu_841_p2;
        gmem_addr_1_reg_1320 <= add_ln127_fu_830_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_fu_1158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state152))) begin
        add_ln170_2_reg_1593 <= add_ln170_2_fu_1193_p2;
        trunc_ln170_reg_1588 <= trunc_ln170_fu_1169_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        add_ln170_3_reg_1600 <= add_ln170_3_fu_1199_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        add_ln170_5_reg_1605 <= add_ln170_5_fu_1208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state152)) begin
        bit_buffer_1_cast_reg_1574 <= bit_buffer_1_cast_fu_1134_p3;
        bit_buffer_1_reg_1569 <= bit_buffer_1_fu_1122_p3;
        bit_count_1_reg_1579 <= bit_count_1_fu_1142_p2;
        icmp_ln170_reg_1584 <= icmp_ln170_fu_1158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_1_fu_1214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state154))) begin
        bit_count_3_reg_1613 <= bit_count_3_fu_1219_p2;
        byte_1_reg_1618 <= byte_1_fu_1230_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_fu_1093_p2 == 1'd1) & (icmp_ln164_1_fu_1084_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state151))) begin
        byte_reg_1564 <= byte_fu_1111_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_reg_1301 == 1'd0) & (1'b1 == ap_CS_fsm_state144))) begin
        code_word_count_1_reg_1331 <= code_word_count_fu_196;
        trunc_ln127_1_reg_1337 <= trunc_ln127_1_fu_861_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state144) & ((icmp_ln127_1_fu_866_p2 == 1'd1) | (icmp_ln127_reg_1301 == 1'd1)))) begin
        code_word_count_2_reg_1345 <= code_word_count_2_fu_871_p2;
        icmp_ln164_reg_1350 <= icmp_ln164_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        current_code_reg_1285 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state146) & ((icmp_ln133_reg_1384 == 1'd0) | ((icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_0_addr_1_reg_1445[10 : 1] <= tmp_8_fu_992_p3[10 : 1];
        hw_dictionary_1_addr_1_reg_1450[10 : 1] <= tmp_8_fu_992_p3[10 : 1];
        hw_dictionary_2_addr_1_reg_1455[10 : 1] <= tmp_8_fu_992_p3[10 : 1];
        hw_dictionary_3_addr_1_reg_1460[10 : 1] <= tmp_8_fu_992_p3[10 : 1];
        hw_dictionary_4_addr_1_reg_1465[10 : 1] <= tmp_8_fu_992_p3[10 : 1];
        hw_dictionary_5_addr_1_reg_1470[10 : 1] <= tmp_8_fu_992_p3[10 : 1];
        hw_dictionary_6_addr_1_reg_1475[10 : 1] <= tmp_8_fu_992_p3[10 : 1];
        hw_dictionary_7_addr_1_reg_1480[10 : 1] <= tmp_8_fu_992_p3[10 : 1];
        trunc_ln147_1_reg_1441 <= {{dict_size_fu_200[12:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state148) & ((icmp_ln133_reg_1384 == 1'd0) | ((icmp_ln133_1_reg_1388 == 1'd0) | ((icmp_ln134_1_fu_1050_p2 == 1'd1) & (icmp_ln134_reg_1530 == 1'd1)))))) begin
        i_2_reg_1542 <= i_2_fu_1072_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        i_3_reg_1547 <= i_3_fu_1078_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln112_reg_1270 <= icmp_ln112_fu_794_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        icmp_ln127_reg_1301 <= icmp_ln127_fu_821_p2;
        zext_ln122_reg_1291[7 : 0] <= zext_ln122_fu_806_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        icmp_ln133_1_reg_1388 <= icmp_ln133_1_fu_903_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state145)) begin
        icmp_ln133_reg_1384 <= icmp_ln133_fu_897_p2;
        zext_ln133_reg_1369[7 : 0] <= zext_ln133_fu_893_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        icmp_ln134_reg_1530 <= icmp_ln134_fu_1044_p2;
        zext_ln134_reg_1485[5 : 0] <= zext_ln134_fu_1018_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_1_fu_903_p2 == 1'd0) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        icmp_ln146_reg_1437 <= icmp_ln146_fu_943_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_1_fu_1084_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state151))) begin
        icmp_ln178_reg_1560 <= icmp_ln178_fu_1093_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln170_fu_1158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state152)) | ((icmp_ln178_fu_1093_p2 == 1'd1) & (icmp_ln164_1_fu_1084_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state151)))) begin
        reg_786 <= grp_fu_775_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        tmp_2_reg_1392[10 : 1] <= tmp_2_fu_913_p3[10 : 1];
    end
end

always @ (*) begin
    if ((~((ap_predicate_op838_writeresp_state293 == 1'b1) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state293))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln127_1_fu_866_p2 == 1'd1) & (icmp_ln127_reg_1301 == 1'd0) & (1'b1 == ap_CS_fsm_state144))) begin
        ap_phi_mux_code_word_count_0_lcssa_phi_fu_647_p4 = code_word_count_fu_196;
    end else begin
        ap_phi_mux_code_word_count_0_lcssa_phi_fu_647_p4 = code_word_count_0_lcssa_reg_643;
    end
end

always @ (*) begin
    if (((icmp_ln127_1_fu_866_p2 == 1'd1) & (icmp_ln127_reg_1301 == 1'd0) & (1'b1 == ap_CS_fsm_state144))) begin
        ap_phi_mux_current_code_0_lcssa_phi_fu_658_p4 = trunc_ln127_1_fu_861_p1;
    end else begin
        ap_phi_mux_current_code_0_lcssa_phi_fu_658_p4 = current_code_0_lcssa_reg_655;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op838_writeresp_state293 == 1'b1) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state293))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        code_words_address0 = i_1_reg_691;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        code_words_address0 = code_word_count_1_reg_1331;
    end else if ((1'b1 == ap_CS_fsm_state145)) begin
        code_words_address0 = code_word_count_fu_196;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        code_words_address0 = ap_phi_mux_code_word_count_0_lcssa_phi_fu_647_p4;
    end else begin
        code_words_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state151) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state145)))) begin
        code_words_ce0 = 1'b1;
    end else begin
        code_words_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state145))) begin
        code_words_d0 = trunc_ln127_1_reg_1337;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        code_words_d0 = ap_phi_mux_current_code_0_lcssa_phi_fu_658_p4;
    end else begin
        code_words_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln133_fu_897_p2 == 1'd0) & (gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state145)) | ((icmp_ln133_1_fu_903_p2 == 1'd0) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)) | ((1'b1 == ap_CS_fsm_state144) & ((icmp_ln127_1_fu_866_p2 == 1'd1) | (icmp_ln127_reg_1301 == 1'd1))))) begin
        code_words_we0 = 1'b1;
    end else begin
        code_words_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln170_1_fu_1214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state154))) begin
        compressed_size = add_ln170_4_fu_1240_p2;
    end else if (((icmp_ln178_fu_1093_p2 == 1'd1) & (icmp_ln164_1_fu_1084_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state151))) begin
        compressed_size = add_ln180_fu_1115_p2;
    end else if ((((1'b1 == ap_CS_fsm_state144) & ((icmp_ln127_1_fu_866_p2 == 1'd1) | (icmp_ln127_reg_1301 == 1'd1))) | ((icmp_ln112_reg_1270 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        compressed_size = 64'd0;
    end else begin
        compressed_size = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
        gmem_ARADDR = gmem_addr_1_reg_1320;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln112_reg_1270 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARADDR = input_data;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
        gmem_ARLEN = add_ln127_1_reg_1326;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln112_reg_1270 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARLEN = 32'd1;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((1'b0 == ap_block_state2_io) & (icmp_ln112_reg_1270 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state224)) begin
            gmem_AWLEN = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state153)) begin
            gmem_AWLEN = zext_ln170_1_fu_1204_p1;
        end else begin
            gmem_AWLEN = 'bx;
        end
    end else begin
        gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state224)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state153)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op838_writeresp_state293 == 1'b1) & (gmem_BVALID == 1'b0)) & (ap_predicate_op838_writeresp_state293 == 1'b1) & (1'b1 == ap_CS_fsm_state293)) | (~((gmem_BVALID == 1'b0) & (icmp_ln170_reg_1584 == 1'd1)) & (icmp_ln170_reg_1584 == 1'd1) & (1'b1 == ap_CS_fsm_state223)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state145)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state225)) begin
        gmem_WDATA = byte_reg_1564;
    end else if ((1'b1 == ap_CS_fsm_state155)) begin
        gmem_WDATA = byte_1_reg_1618;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state225)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state155)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | ((icmp_ln112_reg_1270 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state224) | (1'b1 == ap_CS_fsm_state153))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln178_reg_1560 == 1'd1) & (icmp_ln164_reg_1350 == 1'd0) & (icmp_ln112_reg_1270 == 1'd0) & (1'b1 == ap_CS_fsm_state293)) | ((icmp_ln170_reg_1584 == 1'd1) & (1'b1 == ap_CS_fsm_state223)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state72))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state225) | (1'b1 == ap_CS_fsm_state155))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        grp_fu_738_p0 = code_word_count_1_reg_1331;
    end else if ((1'b1 == ap_CS_fsm_state145)) begin
        grp_fu_738_p0 = code_word_count_fu_196;
    end else begin
        grp_fu_738_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        grp_fu_748_p9 = zext_ln134_reg_1485;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        grp_fu_748_p9 = zext_ln134_fu_1018_p1;
    end else begin
        grp_fu_748_p9 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_0_address0 = hw_dictionary_0_addr_1_reg_1445;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        hw_dictionary_0_address0 = tmp_4_fu_1028_p3;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd0) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd0) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_0_address0 = zext_ln147_fu_974_p1;
    end else if (((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        hw_dictionary_0_address0 = zext_ln134_1_fu_921_p1;
    end else begin
        hw_dictionary_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state149) | ((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)) | ((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd0) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd0) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))))) begin
        hw_dictionary_0_ce0 = 1'b1;
    end else begin
        hw_dictionary_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_0_d0 = zext_ln133_reg_1369;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd0) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd0) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_0_d0 = current_code_1_reg_613;
    end else begin
        hw_dictionary_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd0) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd0) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))) | ((trunc_ln147_1_reg_1441 == 3'd0) & (1'b1 == ap_CS_fsm_state149)))) begin
        hw_dictionary_0_we0 = 1'b1;
    end else begin
        hw_dictionary_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_1_address0 = hw_dictionary_1_addr_1_reg_1450;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        hw_dictionary_1_address0 = tmp_4_fu_1028_p3;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd1) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd1) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_1_address0 = zext_ln147_fu_974_p1;
    end else if (((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        hw_dictionary_1_address0 = zext_ln134_1_fu_921_p1;
    end else begin
        hw_dictionary_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state149) | ((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)) | ((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd1) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd1) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))))) begin
        hw_dictionary_1_ce0 = 1'b1;
    end else begin
        hw_dictionary_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_1_d0 = zext_ln133_reg_1369;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd1) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd1) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_1_d0 = current_code_1_reg_613;
    end else begin
        hw_dictionary_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd1) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd1) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))) | ((trunc_ln147_1_reg_1441 == 3'd1) & (1'b1 == ap_CS_fsm_state149)))) begin
        hw_dictionary_1_we0 = 1'b1;
    end else begin
        hw_dictionary_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_2_address0 = hw_dictionary_2_addr_1_reg_1455;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        hw_dictionary_2_address0 = tmp_4_fu_1028_p3;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd2) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd2) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_2_address0 = zext_ln147_fu_974_p1;
    end else if (((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        hw_dictionary_2_address0 = zext_ln134_1_fu_921_p1;
    end else begin
        hw_dictionary_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state149) | ((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)) | ((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd2) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd2) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))))) begin
        hw_dictionary_2_ce0 = 1'b1;
    end else begin
        hw_dictionary_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_2_d0 = zext_ln133_reg_1369;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd2) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd2) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_2_d0 = current_code_1_reg_613;
    end else begin
        hw_dictionary_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd2) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd2) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))) | ((trunc_ln147_1_reg_1441 == 3'd2) & (1'b1 == ap_CS_fsm_state149)))) begin
        hw_dictionary_2_we0 = 1'b1;
    end else begin
        hw_dictionary_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_3_address0 = hw_dictionary_3_addr_1_reg_1460;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        hw_dictionary_3_address0 = tmp_4_fu_1028_p3;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd3) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd3) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_3_address0 = zext_ln147_fu_974_p1;
    end else if (((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        hw_dictionary_3_address0 = zext_ln134_1_fu_921_p1;
    end else begin
        hw_dictionary_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state149) | ((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)) | ((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd3) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd3) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))))) begin
        hw_dictionary_3_ce0 = 1'b1;
    end else begin
        hw_dictionary_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_3_d0 = zext_ln133_reg_1369;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd3) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd3) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_3_d0 = current_code_1_reg_613;
    end else begin
        hw_dictionary_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd3) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd3) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))) | ((trunc_ln147_1_reg_1441 == 3'd3) & (1'b1 == ap_CS_fsm_state149)))) begin
        hw_dictionary_3_we0 = 1'b1;
    end else begin
        hw_dictionary_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_4_address0 = hw_dictionary_4_addr_1_reg_1465;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        hw_dictionary_4_address0 = tmp_4_fu_1028_p3;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd4) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd4) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_4_address0 = zext_ln147_fu_974_p1;
    end else if (((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        hw_dictionary_4_address0 = zext_ln134_1_fu_921_p1;
    end else begin
        hw_dictionary_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state149) | ((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)) | ((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd4) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd4) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))))) begin
        hw_dictionary_4_ce0 = 1'b1;
    end else begin
        hw_dictionary_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_4_d0 = zext_ln133_reg_1369;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd4) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd4) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_4_d0 = current_code_1_reg_613;
    end else begin
        hw_dictionary_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd4) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd4) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))) | ((trunc_ln147_1_reg_1441 == 3'd4) & (1'b1 == ap_CS_fsm_state149)))) begin
        hw_dictionary_4_we0 = 1'b1;
    end else begin
        hw_dictionary_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_5_address0 = hw_dictionary_5_addr_1_reg_1470;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        hw_dictionary_5_address0 = tmp_4_fu_1028_p3;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd5) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd5) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_5_address0 = zext_ln147_fu_974_p1;
    end else if (((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        hw_dictionary_5_address0 = zext_ln134_1_fu_921_p1;
    end else begin
        hw_dictionary_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state149) | ((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)) | ((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd5) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd5) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))))) begin
        hw_dictionary_5_ce0 = 1'b1;
    end else begin
        hw_dictionary_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_5_d0 = zext_ln133_reg_1369;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd5) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd5) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_5_d0 = current_code_1_reg_613;
    end else begin
        hw_dictionary_5_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd5) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd5) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))) | ((trunc_ln147_1_reg_1441 == 3'd5) & (1'b1 == ap_CS_fsm_state149)))) begin
        hw_dictionary_5_we0 = 1'b1;
    end else begin
        hw_dictionary_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_6_address0 = hw_dictionary_6_addr_1_reg_1475;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        hw_dictionary_6_address0 = tmp_4_fu_1028_p3;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd6) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd6) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_6_address0 = zext_ln147_fu_974_p1;
    end else if (((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        hw_dictionary_6_address0 = zext_ln134_1_fu_921_p1;
    end else begin
        hw_dictionary_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state149) | ((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)) | ((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd6) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd6) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))))) begin
        hw_dictionary_6_ce0 = 1'b1;
    end else begin
        hw_dictionary_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_6_d0 = zext_ln133_reg_1369;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd6) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd6) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_6_d0 = current_code_1_reg_613;
    end else begin
        hw_dictionary_6_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd6) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd6) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))) | ((trunc_ln147_1_reg_1441 == 3'd6) & (1'b1 == ap_CS_fsm_state149)))) begin
        hw_dictionary_6_we0 = 1'b1;
    end else begin
        hw_dictionary_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_7_address0 = hw_dictionary_7_addr_1_reg_1480;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        hw_dictionary_7_address0 = tmp_4_fu_1028_p3;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd7) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd7) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_7_address0 = zext_ln147_fu_974_p1;
    end else if (((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        hw_dictionary_7_address0 = zext_ln134_1_fu_921_p1;
    end else begin
        hw_dictionary_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state149) | ((icmp_ln133_1_fu_903_p2 == 1'd1) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146)) | ((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd7) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd7) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))))) begin
        hw_dictionary_7_ce0 = 1'b1;
    end else begin
        hw_dictionary_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        hw_dictionary_7_d0 = zext_ln133_reg_1369;
    end else if (((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd7) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd7) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
        hw_dictionary_7_d0 = current_code_1_reg_613;
    end else begin
        hw_dictionary_7_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state146) & (((trunc_ln147_1_fu_952_p4 == 3'd7) & (icmp_ln133_reg_1384 == 1'd0)) | ((trunc_ln147_1_fu_952_p4 == 3'd7) & (icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0)))) | ((trunc_ln147_1_reg_1441 == 3'd7) & (1'b1 == ap_CS_fsm_state149)))) begin
        hw_dictionary_7_we0 = 1'b1;
    end else begin
        hw_dictionary_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (icmp_ln112_reg_1270 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state293;
            end else if (((1'b0 == ap_block_state2_io) & (icmp_ln112_reg_1270 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((icmp_ln127_fu_821_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            if (((1'b1 == ap_CS_fsm_state144) & (((icmp_ln164_fu_877_p2 == 1'd0) & (icmp_ln127_reg_1301 == 1'd1)) | ((icmp_ln164_fu_877_p2 == 1'd0) & (icmp_ln127_1_fu_866_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state151;
            end else if (((1'b1 == ap_CS_fsm_state144) & (((icmp_ln164_fu_877_p2 == 1'd1) & (icmp_ln127_reg_1301 == 1'd1)) | ((icmp_ln164_fu_877_p2 == 1'd1) & (icmp_ln127_1_fu_866_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state293;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end
        end
        ap_ST_fsm_state145 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state145))) begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end
        end
        ap_ST_fsm_state146 : begin
            if (((1'b1 == ap_CS_fsm_state146) & ((icmp_ln133_reg_1384 == 1'd0) | ((icmp_ln146_fu_943_p2 == 1'd1) & (icmp_ln133_1_fu_903_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end else if (((icmp_ln146_fu_943_p2 == 1'd0) & (icmp_ln133_1_fu_903_p2 == 1'd0) & (icmp_ln133_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
                ap_NS_fsm = ap_ST_fsm_state148;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            if (((1'b1 == ap_CS_fsm_state148) & ((icmp_ln133_reg_1384 == 1'd0) | ((icmp_ln133_1_reg_1388 == 1'd0) | ((icmp_ln134_1_fu_1050_p2 == 1'd1) & (icmp_ln134_reg_1530 == 1'd1)))))) begin
                ap_NS_fsm = ap_ST_fsm_state150;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state151 : begin
            if (((icmp_ln178_fu_1093_p2 == 1'd0) & (icmp_ln164_1_fu_1084_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state151))) begin
                ap_NS_fsm = ap_ST_fsm_state293;
            end else if (((icmp_ln178_fu_1093_p2 == 1'd1) & (icmp_ln164_1_fu_1084_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state151))) begin
                ap_NS_fsm = ap_ST_fsm_state224;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state152;
            end
        end
        ap_ST_fsm_state152 : begin
            if (((icmp_ln170_fu_1158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state152))) begin
                ap_NS_fsm = ap_ST_fsm_state223;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state153;
            end
        end
        ap_ST_fsm_state153 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state153))) begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state153;
            end
        end
        ap_ST_fsm_state154 : begin
            if (((icmp_ln170_1_fu_1214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state154))) begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end
        end
        ap_ST_fsm_state155 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state155))) begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln170_reg_1584 == 1'd1)) & (1'b1 == ap_CS_fsm_state223))) begin
                ap_NS_fsm = ap_ST_fsm_state151;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state223;
            end
        end
        ap_ST_fsm_state224 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state224))) begin
                ap_NS_fsm = ap_ST_fsm_state225;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state224;
            end
        end
        ap_ST_fsm_state225 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state225))) begin
                ap_NS_fsm = ap_ST_fsm_state226;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state225;
            end
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            ap_NS_fsm = ap_ST_fsm_state252;
        end
        ap_ST_fsm_state252 : begin
            ap_NS_fsm = ap_ST_fsm_state253;
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state255;
        end
        ap_ST_fsm_state255 : begin
            ap_NS_fsm = ap_ST_fsm_state256;
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state258;
        end
        ap_ST_fsm_state258 : begin
            ap_NS_fsm = ap_ST_fsm_state259;
        end
        ap_ST_fsm_state259 : begin
            ap_NS_fsm = ap_ST_fsm_state260;
        end
        ap_ST_fsm_state260 : begin
            ap_NS_fsm = ap_ST_fsm_state261;
        end
        ap_ST_fsm_state261 : begin
            ap_NS_fsm = ap_ST_fsm_state262;
        end
        ap_ST_fsm_state262 : begin
            ap_NS_fsm = ap_ST_fsm_state263;
        end
        ap_ST_fsm_state263 : begin
            ap_NS_fsm = ap_ST_fsm_state264;
        end
        ap_ST_fsm_state264 : begin
            ap_NS_fsm = ap_ST_fsm_state265;
        end
        ap_ST_fsm_state265 : begin
            ap_NS_fsm = ap_ST_fsm_state266;
        end
        ap_ST_fsm_state266 : begin
            ap_NS_fsm = ap_ST_fsm_state267;
        end
        ap_ST_fsm_state267 : begin
            ap_NS_fsm = ap_ST_fsm_state268;
        end
        ap_ST_fsm_state268 : begin
            ap_NS_fsm = ap_ST_fsm_state269;
        end
        ap_ST_fsm_state269 : begin
            ap_NS_fsm = ap_ST_fsm_state270;
        end
        ap_ST_fsm_state270 : begin
            ap_NS_fsm = ap_ST_fsm_state271;
        end
        ap_ST_fsm_state271 : begin
            ap_NS_fsm = ap_ST_fsm_state272;
        end
        ap_ST_fsm_state272 : begin
            ap_NS_fsm = ap_ST_fsm_state273;
        end
        ap_ST_fsm_state273 : begin
            ap_NS_fsm = ap_ST_fsm_state274;
        end
        ap_ST_fsm_state274 : begin
            ap_NS_fsm = ap_ST_fsm_state275;
        end
        ap_ST_fsm_state275 : begin
            ap_NS_fsm = ap_ST_fsm_state276;
        end
        ap_ST_fsm_state276 : begin
            ap_NS_fsm = ap_ST_fsm_state277;
        end
        ap_ST_fsm_state277 : begin
            ap_NS_fsm = ap_ST_fsm_state278;
        end
        ap_ST_fsm_state278 : begin
            ap_NS_fsm = ap_ST_fsm_state279;
        end
        ap_ST_fsm_state279 : begin
            ap_NS_fsm = ap_ST_fsm_state280;
        end
        ap_ST_fsm_state280 : begin
            ap_NS_fsm = ap_ST_fsm_state281;
        end
        ap_ST_fsm_state281 : begin
            ap_NS_fsm = ap_ST_fsm_state282;
        end
        ap_ST_fsm_state282 : begin
            ap_NS_fsm = ap_ST_fsm_state283;
        end
        ap_ST_fsm_state283 : begin
            ap_NS_fsm = ap_ST_fsm_state284;
        end
        ap_ST_fsm_state284 : begin
            ap_NS_fsm = ap_ST_fsm_state285;
        end
        ap_ST_fsm_state285 : begin
            ap_NS_fsm = ap_ST_fsm_state286;
        end
        ap_ST_fsm_state286 : begin
            ap_NS_fsm = ap_ST_fsm_state287;
        end
        ap_ST_fsm_state287 : begin
            ap_NS_fsm = ap_ST_fsm_state288;
        end
        ap_ST_fsm_state288 : begin
            ap_NS_fsm = ap_ST_fsm_state289;
        end
        ap_ST_fsm_state289 : begin
            ap_NS_fsm = ap_ST_fsm_state290;
        end
        ap_ST_fsm_state290 : begin
            ap_NS_fsm = ap_ST_fsm_state291;
        end
        ap_ST_fsm_state291 : begin
            ap_NS_fsm = ap_ST_fsm_state292;
        end
        ap_ST_fsm_state292 : begin
            ap_NS_fsm = ap_ST_fsm_state293;
        end
        ap_ST_fsm_state293 : begin
            if ((~((ap_predicate_op838_writeresp_state293 == 1'b1) & (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state293))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state293;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln127_1_fu_841_p2 = ($signed(trunc_ln127_fu_827_p1) + $signed(32'd4294967295));

assign add_ln127_fu_830_p2 = (input_data + 64'd1);

assign add_ln170_2_fu_1193_p2 = (zext_ln170_fu_1189_p1 + 30'd1);

assign add_ln170_3_fu_1199_p2 = (trunc_ln170_reg_1588 + 3'd5);

assign add_ln170_4_fu_1240_p2 = (zext_ln170_3_fu_1237_p1 + compressed_size_promoted_fu_208);

assign add_ln170_5_fu_1208_p2 = (indvar_reg_715 + 30'd1);

assign add_ln170_fu_1173_p2 = (bit_count_fu_204 + 32'd5);

assign add_ln180_fu_1115_p2 = (compressed_size_promoted_fu_208 + 64'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state223 = ap_CS_fsm[32'd222];

assign ap_CS_fsm_state224 = ap_CS_fsm[32'd223];

assign ap_CS_fsm_state225 = ap_CS_fsm[32'd224];

assign ap_CS_fsm_state293 = ap_CS_fsm[32'd292];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state223 = ((gmem_BVALID == 1'b0) & (icmp_ln170_reg_1584 == 1'd1));
end

always @ (*) begin
    ap_block_state293 = ((ap_predicate_op838_writeresp_state293 == 1'b1) & (gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((gmem_ARREADY == 1'b0) & (icmp_ln112_reg_1270 == 1'd0));
end

always @ (*) begin
    ap_predicate_op838_writeresp_state293 = ((icmp_ln178_reg_1560 == 1'd1) & (icmp_ln164_reg_1350 == 1'd0) & (icmp_ln112_reg_1270 == 1'd0));
end

assign bit_buffer_1_cast_fu_1134_p3 = {{trunc_ln167_fu_1130_p1}, {code_words_q0}};

assign bit_buffer_1_fu_1122_p3 = {{bit_buffer_reg_703}, {code_words_q0}};

assign bit_count_1_fu_1142_p2 = (bit_count_fu_204 + 32'd13);

assign bit_count_3_fu_1219_p2 = ($signed(bit_count_2_reg_726) + $signed(32'd4294967288));

assign byte_1_fu_1230_p1 = lshr_ln171_fu_1225_p2[7:0];

assign byte_fu_1111_p1 = shl_ln179_fu_1105_p2[7:0];

assign code_word_count_2_fu_871_p2 = (ap_phi_mux_code_word_count_0_lcssa_phi_fu_647_p4 + 64'd1);

assign dict_size_1_fu_1061_p2 = (dict_size_fu_200 + 16'd1);

assign grp_fu_738_p2 = (grp_fu_738_p0 + 64'd1);

assign grp_fu_775_p2 = (compressed_size_promoted_fu_208 + compressed_data);

assign i_2_fu_1072_p2 = (i_reg_631 + 64'd1);

assign i_3_fu_1078_p2 = (i_1_reg_691 + 64'd1);

assign icmp_ln112_fu_794_p2 = ((input_size == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln127_1_fu_866_p2 = ((i_reg_631 == input_size) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_821_p2 = ((tmp_fu_812_p4 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln133_1_fu_903_p2 = ((j_reg_665 < dict_size_fu_200) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_897_p2 = ((dict_size_fu_200 > 16'd256) ? 1'b1 : 1'b0);

assign icmp_ln134_1_fu_1050_p2 = ((grp_fu_748_p10 == zext_ln133_reg_1369) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_1044_p2 = ((grp_fu_748_p10 == current_code_1_reg_613) ? 1'b1 : 1'b0);

assign icmp_ln146_fu_943_p2 = ((tmp_5_fu_933_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln164_1_fu_1084_p2 = ((i_1_reg_691 == code_word_count_2_reg_1345) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_877_p2 = ((code_word_count_2_fu_871_p2 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln170_1_fu_1214_p2 = ((indvar_reg_715 == add_ln170_2_reg_1593) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_1158_p2 = (($signed(tmp_6_fu_1148_p4) > $signed(29'd0)) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_1093_p2 = (($signed(bit_count_fu_204) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign j_1_fu_1055_p2 = (j_reg_665 + 16'd1);

assign lshr_ln171_fu_1225_p2 = bit_buffer_1_reg_1569 >> bit_count_3_fu_1219_p2;

assign lshr_ln_fu_1008_p4 = {{j_reg_665[15:10]}};

assign or_ln134_fu_1023_p2 = (tmp_2_reg_1392 | 11'd1);

assign or_ln148_fu_986_p2 = (tmp_7_fu_966_p3 | 11'd1);

assign shl_ln179_fu_1105_p2 = zext_ln164_fu_1089_p1 << sub_ln179_fu_1099_p2;

assign sub_ln179_fu_1099_p2 = (32'd8 - bit_count_fu_204);

assign tmp_2_fu_913_p3 = {{trunc_ln134_fu_909_p1}, {1'd0}};

assign tmp_4_fu_1028_p3 = {{53'd0}, {or_ln134_fu_1023_p2}};

assign tmp_5_fu_933_p4 = {{dict_size_fu_200[15:13]}};

assign tmp_6_fu_1148_p4 = {{bit_count_1_fu_1142_p2[31:3]}};

assign tmp_7_fu_966_p3 = {{trunc_ln147_fu_962_p1}, {1'd0}};

assign tmp_8_fu_992_p3 = {{53'd0}, {or_ln148_fu_986_p2}};

assign tmp_fu_812_p4 = {{input_size[63:1]}};

assign trunc_ln127_1_fu_861_p1 = current_code_1_reg_613[12:0];

assign trunc_ln127_fu_827_p1 = input_size[31:0];

assign trunc_ln134_fu_909_p1 = j_reg_665[9:0];

assign trunc_ln147_1_fu_952_p4 = {{dict_size_fu_200[12:10]}};

assign trunc_ln147_fu_962_p1 = dict_size_fu_200[9:0];

assign trunc_ln167_fu_1130_p1 = bit_buffer_reg_703[5:0];

assign trunc_ln170_1_fu_1179_p4 = {{add_ln170_fu_1173_p2[31:3]}};

assign trunc_ln170_fu_1169_p1 = bit_count_fu_204[2:0];

assign zext_ln122_1_fu_809_p1 = current_code_reg_1285;

assign zext_ln122_fu_806_p1 = current_code_reg_1285;

assign zext_ln133_fu_893_p1 = gmem_RDATA;

assign zext_ln134_1_fu_921_p1 = tmp_2_fu_913_p3;

assign zext_ln134_fu_1018_p1 = lshr_ln_fu_1008_p4;

assign zext_ln147_fu_974_p1 = tmp_7_fu_966_p3;

assign zext_ln164_fu_1089_p1 = bit_buffer_reg_703;

assign zext_ln170_1_fu_1204_p1 = add_ln170_2_reg_1593;

assign zext_ln170_2_fu_1234_p1 = add_ln170_3_reg_1600;

assign zext_ln170_3_fu_1237_p1 = add_ln170_2_reg_1593;

assign zext_ln170_fu_1189_p1 = trunc_ln170_1_fu_1179_p4;

always @ (posedge ap_clk) begin
    zext_ln122_reg_1291[15:8] <= 8'b00000000;
    zext_ln133_reg_1369[15:8] <= 8'b00000000;
    tmp_2_reg_1392[0] <= 1'b0;
    hw_dictionary_0_addr_1_reg_1445[0] <= 1'b1;
    hw_dictionary_1_addr_1_reg_1450[0] <= 1'b1;
    hw_dictionary_2_addr_1_reg_1455[0] <= 1'b1;
    hw_dictionary_3_addr_1_reg_1460[0] <= 1'b1;
    hw_dictionary_4_addr_1_reg_1465[0] <= 1'b1;
    hw_dictionary_5_addr_1_reg_1470[0] <= 1'b1;
    hw_dictionary_6_addr_1_reg_1475[0] <= 1'b1;
    hw_dictionary_7_addr_1_reg_1480[0] <= 1'b1;
    zext_ln134_reg_1485[15:6] <= 10'b0000000000;
end

endmodule //lzw_encode_hw
